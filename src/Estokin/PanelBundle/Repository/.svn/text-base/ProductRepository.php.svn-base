<?php

namespace Estokin\PanelBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

	/**
	 * Gets products by user and sold.
	 *
	 * @param string $shop
	 * @param boolean $sold
	 *
	 * @return Rhb\EditorBundle\Entity\Product
	 */
	public function getBySold($shop, $sold)
	{
		$q = $this->createQueryBuilder('p')
		->where('p.shop = :shop', 'p.sold = :sold')
		->setParameter('shop', $shop)
		->setParameter('sold', $sold)
		->orderBy('p.date_sold', 'DESC');

		return $q->getQuery()->getResult();
	}

	/**
	 * Gets stock products by user.
	 *
	 * @param string $shop
	 *
	 * @return Rhb\EditorBundle\Entity\Product
	 */
	public function getForStock($shop)
	{
		$q = $this->createQueryBuilder('p')
		->Where('p.shop = :shop')
		->andWhere('p.state = :state1 OR p.state = :state2 OR p.state = :state3')
		->setParameter('shop', $shop)
		->setParameter('state1', 'STATE_ONLINE')
		->setParameter('state2', 'STATE_BLOCK')
		->setParameter('state3', 'STATE_UNAV')
		->orderBy('p.date_add', 'DESC');
		return $q->getQuery()->getResult();
	}
	/**
	 * Gets stock products.
	 *
	 *
	 * @return Rhb\EditorBundle\Entity\Product
	 */
	public function getForStockA()
	{
		$q = $this->createQueryBuilder('p')
		->Where('p.state = :state1 OR p.state = :state2 OR p.state = :state3')
		->setParameter('state1', 'STATE_ONLINE')
		->setParameter('state2', 'STATE_BLOCK')
		->setParameter('state3', 'STATE_UNAV')
		->orderBy('p.date_add', 'DESC');
		return $q->getQuery()->getResult();
	}
	
	/**
	 * Gets local products by user.
	 *
	 * @param string $shop
	 *
	 * @return Rhb\EditorBundle\Entity\Product
	 */
	public function getForLocal($shop)
	{
		$q = $this->createQueryBuilder('p')
		->Where('p.shop = :shop')
		->andWhere('p.state = :state1 OR p.state = :state2')
		->setParameter('shop', $shop)
		->setParameter('state1', 'STATE_RAW')
		->setParameter('state2', 'STATE_VALID')
		->orderBy('p.date_add', 'DESC');
		return $q->getQuery()->getResult();
	}
	/**
	 * Gets local products.
	 *
	 *
	 * @return Rhb\EditorBundle\Entity\Product
	 */
	public function getForLocalA()
	{
		$q = $this->createQueryBuilder('p')
		->Where('p.state = :state1 OR p.state = :state2')
		->setParameter('state1', 'STATE_RAW')
		->setParameter('state2', 'STATE_VALID')
		->orderBy('p.date_add', 'DESC');
		return $q->getQuery()->getResult();
	}
	/**
	 * Gets products by user and state.
	 *
	 * @param string $shop
	 * @param string $state
	 *
	 * @return Rhb\EditorBundle\Entity\Product
	 */
	public function getByState($shop, $state)
	{
		$q = $this->createQueryBuilder('p')
		->where('p.shop = :shop', 'p.state = :state')
		->setParameter('shop', $shop)
		->setParameter('state', $state);

		return $q->getQuery()->getResult();
	}
	
	/**
	 * Gets product names.
	 *
	 * @return Rhb\EditorBundle\Entity\Product
	 */
	public function getProductNames()
	{
		$q = $this->createQueryBuilder('p','b')
		->leftJoin('p.brand', 'b')
		->select('p.id, b.name as bname, p.name')
		->orderBy('b.name', 'ASC');
		
		return $q->getQuery()->getResult();
	}
	
}