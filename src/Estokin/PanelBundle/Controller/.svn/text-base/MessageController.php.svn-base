<?php

namespace Estokin\PanelBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Form\CsrfProvider\CsrfProviderInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Estokin\PanelBundle\Entity\Message;
use Estokin\PanelBundle\Form\MessageType;

/**
 * Message controller.
 *
 * @Route("/message")
 */
class MessageController extends Controller
{
    /**
     * Lists all Message entities.
     *
     * @Route("/", name="message")
     * @Template()
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getEntityManager();
        $user = $this->get("security.context")->getToken()->getUser();

        if($user->isShop()){
        	$entities_a = $em->getRepository('EstokinPanelBundle:Message')->findBy(
        			array('shop' => $user->getId(), 'admin' => 1, 'type' => 'TICKET'),
        			array('date_add' => 'DESC'));
        	$entities_u = $em->getRepository('EstokinPanelBundle:Message')->findBy(
        			array('shop' => $user->getId(), 'admin' => 0, 'type' => 'TICKET'),
        			array('date_add' => 'DESC'));
        }
        else {        	
        	$entities_u = $em->getRepository('EstokinPanelBundle:Message')->findBy(
        			array('admin' => 1, 'type' => 'TICKET'),
        			array('date_add' => 'DESC'));
        	$entities_a = $em->getRepository('EstokinPanelBundle:Message')->findBy(
        			array('admin' => 0, 'type' => 'TICKET'),
        			array('date_add' => 'DESC'));
        }

        $deleteForm = $this->createFormBuilder(null, array('csrf_protection' => false))->getForm();
        
        return array('entities_a' => $entities_a,
        			'entities_u' => $entities_u, 
        			'user' => $user,
        			'delete_form' => $deleteForm->createView());
    }
    
    /**
     * Lists all Message entities.
     *
     * @Route("/conversation", name="message_conv")
     * @Template()
     */
    public function conversationAction()
    {
    	$em = $this->getDoctrine()->getEntityManager();
    	$user = $this->get("security.context")->getToken()->getUser();
    
    	if($user->isShop()){
    		$entities = $em->getRepository('EstokinPanelBundle:Message')->findBy(
    				array('shop' => $user->getId(), 'type' => 'TICKET'),
    				array('date_add' => 'DESC'));
    	}
    	else {
    		$entities = $em->getRepository('EstokinPanelBundle:Message')->findBy(
    				array('type' => 'TICKET'),
    				array('date_add' => 'DESC'));
    	}
    	return array('entities' => $entities, 'user' => $user);
    }
    
    
    /**
     * Lists all Message entities.
     *
     * @Route("/notifications", name="notifications")
     * @Template()
     */
    public function notificationsAction()
    {
    	$em = $this->getDoctrine()->getEntityManager();
    	$user = $this->get("security.context")->getToken()->getUser();
    	
    	$enti_new = null;
    	$enti_old = null;
    	
    	if($user->isShop()){
    		$entities = $em->getRepository('EstokinPanelBundle:Message')->findBy(
    				array('shop' => $user->getId(), 'type' => 'NOTIFICATION', 'admin' => 1),
    				array('date_add' => 'DESC'));
    		//Mark all notifications as read, for the next time.
    		foreach($entities as $e){
    			if(!$e->getIsRead()){
    				$e->setIsRead(true);
    				$em->persist($e);
    				$enti_new[] = $e;
    			}
    			else $enti_old[] = $e;	
    		}
    		$em->flush();
    	}
    	else {
    		$entities = $em->getRepository('EstokinPanelBundle:Message')->findBy(
    				array('type' => 'NOTIFICATION', 'admin' => 0),
    				array('date_add' => 'DESC'));
    		foreach($entities as $e){ 
    			if(!$e->getIsRead()) {
    				$e->setIsRead(true);
    				$em->persist($e);
    				$enti_new[] = $e; 
    			}
    			else {
    				$enti_old[] = $e; 
    			}
    		$em->flush();
    		}
    	}
    
    	return array('entities_old' => $enti_old, 'entities_new' => $enti_new, 'user' => $user);
    }
    
    /**
     * Lists all Notification entities.
     *
     * @Route("/notificationsall", name="notifications_all")
     * @Template()
     */
    public function notificationsAllAction()
    {
    	$em = $this->getDoctrine()->getEntityManager();
    	$user = $this->get("security.context")->getToken()->getUser();
    	 
    	if(!$user->isShop()) {
    		$entities = $em->getRepository('EstokinPanelBundle:Message')->findBy(
    				array('type' => 'NOTIFICATION'),
    				array('date_add' => 'DESC'));
    	}
    
    	return $this->render('EstokinPanelBundle:Message:notifications-all.html.twig',array('entities' => $entities));
    }

    /**
     * Finds and displays a Message entity.
     *
     * @Route("/{id}/show", name="message_show")
     * @Template()
     */
    public function showAction($id)
    {
        $em = $this->getDoctrine()->getEntityManager();

        $entity = $em->getRepository('EstokinPanelBundle:Message')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Message entity.');
        }

        $deleteForm = $this->createDeleteForm($id);

        if(!$entity->getIsRead()) {
        	$entity->setIsRead(true);
	        $em->persist($entity);
	        $em->flush();
        }         
        
        return array(
            'entity'      => $entity,
            'delete_form' => $deleteForm->createView(),        
        	);
    }

    /**
     * Displays a form to create a new Message entity.
     *
     * @Route("/new", name="message_new")
     * @Template()
     */
    public function newAction()
    {
        $entity = new Message('TICKET');
        $form   = $this->createForm(new MessageType(), $entity);

        $em = $this->getDoctrine()->getEntityManager();
        $user = $this->get("security.context")->getToken()->getUser();


        return array(
        	'user'	 => $user,
            'entity' => $entity,
            'form'   => $form->createView()
        );
    }

    /**
     * Creates a new Message entity.
     *
     * @Route("/create", name="message_create")
     * @Method("post")
     * @Template("EstokinPanelBundle:Message:new.html.twig")
     */
    public function createAction()
    {
        $entity  = new Message('TICKET');
        $request = $this->getRequest();
        $form    = $this->createForm(new MessageType(), $entity);
        $form->bindRequest($request);    
        $shop = $this->get("security.context")->getToken()->getUser();
	    //if it's a shop, we link the shop to de msj
	            
	    if ($shop->isShop()){    
	        $entity->setShop($shop);
	        $entity->setAdmin(false);
	        $entity->setType("TICKET");
	    }
	    //it is an admin msj
	    else {
	    	$entity->setAdmin(true);
	    }
	    
        if ($form->isValid()) {
            $em = $this->getDoctrine()->getEntityManager();
            $em->persist($entity);
            $em->flush();

            $this->get('session')->setFlash('my_flash_key',"Mensaje enviado con Ã©xito.");
            return $this->redirect($this->generateUrl('message', array('id' => $entity->getId())));
            
        }
        foreach($form->getErrors() as $error)
        {
        	$errors[] = strtr($error->getMessageTemplate(), $error->getMessageParameters());
        }
         
        return array(
        		'errors' => $errors,
        		'entity' => $entity,
        		'form'   => $form->createView()
        );
    }

    /**
     * Displays a form to edit an existing Message entity.
     *
     * @Route("/{id}/edit", name="message_edit")
     * @Template()
     */
    public function editAction($id)
    {
        $em = $this->getDoctrine()->getEntityManager();

        $entity = $em->getRepository('EstokinPanelBundle:Message')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Message entity.');
        }

        $editForm = $this->createForm(new MessageType(), $entity);
        $deleteForm = $this->createDeleteForm($id);

        return array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        );
    }

    /**
     * Edits an existing Message entity.
     *
     * @Route("/{id}/update", name="message_update")
     * @Method("post")
     * @Template("EstokinPanelBundle:Message:edit.html.twig")
     */
    public function updateAction($id)
    {
        $em = $this->getDoctrine()->getEntityManager();

        $entity = $em->getRepository('EstokinPanelBundle:Message')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Message entity.');
        }

        $editForm   = $this->createForm(new MessageType(), $entity);
        $deleteForm = $this->createDeleteForm($id);

        $request = $this->getRequest();

        $editForm->bindRequest($request);

        if ($editForm->isValid()) {
            $em->persist($entity);
            $em->flush();

            return $this->redirect($this->generateUrl('message_show', array('id' => $id)));
        }

        return array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        );
    }

    /**
     * Deletes a Message entity.
     *
     * @Route("/{id}/delete", name="message_delete")
     * @Method("post")
     */
    public function deleteAction($id)
    {
        $form = $this->createFormBuilder(null, array('csrf_protection' => false))->getForm();
    	$request = $this->getRequest();

        $form->bindRequest($request);

        $em = $this->getDoctrine()->getEntityManager();
        $entity = $em->getRepository('EstokinPanelBundle:Message')->find($id);
        
        if ($form->isValid()) {

            if (!$entity) {
                throw $this->createNotFoundException('Unable to find Message entity.');
            }

            $em->remove($entity);
            $em->flush();
        }
        else { 
	        foreach($form->getErrors() as $error)
	        {
	        	$errors[] = strtr($error->getMessageTemplate(), $error->getMessageParameters());
	        }
	        return $this->redirect($this->generateUrl('message'),$errors);
        }
        if($entity->getType() == "TICKET") return $this->redirect($this->generateUrl('message'));
        else return $this->redirect($this->generateUrl('notifications'));
    }

    private function createDeleteForm($id)
    {
        return $this->createFormBuilder(array('id' => $id))
            ->add('id', 'hidden')
            ->getForm()
        ;
    }
}
